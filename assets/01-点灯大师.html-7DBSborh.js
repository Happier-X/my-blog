import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,e as t}from"./app-DUjrY3_P.js";const a={},i=t(`<h2 id="如何使用-gpio" tabindex="-1"><a class="header-anchor" href="#如何使用-gpio"><span>如何使用 GPIO</span></a></h2><p>先打开时钟，然后定义一个 GPIO 类型的结构体，配置参数：引脚、模式、速率，最后调用 <code>GPIO_Init</code> 函数进行初始化。</p><h2 id="点亮一颗小灯" tabindex="-1"><a class="header-anchor" href="#点亮一颗小灯"><span>点亮一颗小灯</span></a></h2><p>我们通过给小灯一个高电平，使其发光。</p><p>可以使用 <code>GPIO_SetBits</code> 函数来给引脚赋值高电平，使用 <code>GPIO_ResetBits</code> 函数来给引脚赋值低电平。</p><p>也可以使用 <code>GPIO_WriteBit</code> 函数来给引脚赋值，参数为：引脚、赋值状态。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// main.c</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stm32f10x.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 打开时钟</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 定义一个 GPIO 类型的结构体</span>
    GPIO_InitTypeDef GPIO_Initstructure<span class="token punctuation">;</span>
    <span class="token comment">// 配置参数：模式</span>
    GPIO_Initstructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>
    <span class="token comment">// 配置参数：引脚</span>
    GPIO_Initstructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span>
    <span class="token comment">// 配置参数：速率</span>
    GPIO_Initstructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>
    <span class="token comment">// 用 GPIO_Init 函数将结构体存储</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_Initstructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 给 PA0 引脚低电平</span>
        <span class="token comment">// GPIO_ResetBits(GPIOA,GPIO_Pin_0);</span>
        <span class="token comment">// GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_RESET);</span>
        <span class="token comment">// 给 PA0 引脚高电平</span>
        <span class="token comment">// GPIO_SetBits(GPIOA,GPIO_Pin_0);</span>
        <span class="token comment">// GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_SET);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),c=[i];function o(p,l){return e(),s("div",null,c)}const u=n(a,[["render",o],["__file","01-点灯大师.html.vue"]]),m=JSON.parse('{"path":"/STM32LearningRecord/01-%E7%82%B9%E7%81%AF%E5%A4%A7%E5%B8%88.html","title":"点灯大师","lang":"zh-CN","frontmatter":{"title":"点灯大师","order":1,"date":"2024-03-18T00:00:00.000Z","category":"嵌入式开发","tag":"STM32","description":"如何使用 GPIO 先打开时钟，然后定义一个 GPIO 类型的结构体，配置参数：引脚、模式、速率，最后调用 GPIO_Init 函数进行初始化。 点亮一颗小灯 我们通过给小灯一个高电平，使其发光。 可以使用 GPIO_SetBits 函数来给引脚赋值高电平，使用 GPIO_ResetBits 函数来给引脚赋值低电平。 也可以使用 GPIO_WriteB...","head":[["meta",{"property":"og:url","content":"https://blog.azhf8.top/STM32LearningRecord/01-%E7%82%B9%E7%81%AF%E5%A4%A7%E5%B8%88.html"}],["meta",{"property":"og:site_name","content":"茕茕の博客"}],["meta",{"property":"og:title","content":"点灯大师"}],["meta",{"property":"og:description","content":"如何使用 GPIO 先打开时钟，然后定义一个 GPIO 类型的结构体，配置参数：引脚、模式、速率，最后调用 GPIO_Init 函数进行初始化。 点亮一颗小灯 我们通过给小灯一个高电平，使其发光。 可以使用 GPIO_SetBits 函数来给引脚赋值高电平，使用 GPIO_ResetBits 函数来给引脚赋值低电平。 也可以使用 GPIO_WriteB..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-22T14:22:47.000Z"}],["meta",{"property":"article:author","content":"茕茕"}],["meta",{"property":"article:tag","content":"STM32"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-22T14:22:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"点灯大师\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-22T14:22:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"茕茕\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"如何使用 GPIO","slug":"如何使用-gpio","link":"#如何使用-gpio","children":[]},{"level":2,"title":"点亮一颗小灯","slug":"点亮一颗小灯","link":"#点亮一颗小灯","children":[]}],"git":{"createdTime":1715560289000,"updatedTime":1716387767000,"contributors":[{"name":"zhf521","email":"3407085928@qq.com","commits":3}]},"readingTime":{"minutes":0.82,"words":245},"filePathRelative":"STM32LearningRecord/01-点灯大师.md","localizedDate":"2024年3月18日","excerpt":"<h2>如何使用 GPIO</h2>\\n<p>先打开时钟，然后定义一个 GPIO 类型的结构体，配置参数：引脚、模式、速率，最后调用 <code>GPIO_Init</code> 函数进行初始化。</p>\\n<h2>点亮一颗小灯</h2>\\n<p>我们通过给小灯一个高电平，使其发光。</p>\\n<p>可以使用 <code>GPIO_SetBits</code> 函数来给引脚赋值高电平，使用 <code>GPIO_ResetBits</code> 函数来给引脚赋值低电平。</p>\\n<p>也可以使用 <code>GPIO_WriteBit</code> 函数来给引脚赋值，参数为：引脚、赋值状态。</p>\\n","autoDesc":true}');export{u as comp,m as data};
