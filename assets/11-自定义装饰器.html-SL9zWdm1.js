import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DpcdF9xC.js";const e={},p=t(`<h2 id="创建自定义装饰器" tabindex="-1"><a class="header-anchor" href="#创建自定义装饰器"><span>创建自定义装饰器</span></a></h2><p>Nest 允许我们创建自定义装饰器。</p><p>使用以下命令来创建一个装饰器：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nest g decorator 装饰器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的内容如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/role/role.decorator.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> SetMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Role</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">SetMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;role&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装饰器聚合" tabindex="-1"><a class="header-anchor" href="#装饰器聚合"><span>装饰器聚合</span></a></h2><p>我们可以将多个装饰器聚合。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/auth/auth.decorator.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> applyDecorators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Auth</span><span class="token punctuation">(</span><span class="token operator">...</span>roles<span class="token operator">:</span> Role<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">applyDecorators</span><span class="token punctuation">(</span>
        <span class="token function">SetMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;roles&#39;</span><span class="token punctuation">,</span> roles<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">UseGuards</span><span class="token punctuation">(</span>AuthGuard<span class="token punctuation">,</span> RolesGuard<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">ApiBearerAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">ApiUnauthorizedResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&#39;Unauthorized&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","11-自定义装饰器.html.vue"]]),k=JSON.parse(`{"path":"/NestJSLearningRecord/11-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8.html","title":"自定义装饰器","lang":"zh-CN","frontmatter":{"title":"自定义装饰器","order":11,"date":"2024-03-05T00:00:00.000Z","category":"软件开发","tag":"Nest","cover":"/assets/images/自定义装饰器.png","banner":"/assets/images/自定义装饰器.png","description":"创建自定义装饰器 Nest 允许我们创建自定义装饰器。 使用以下命令来创建一个装饰器： 它的内容如下： 装饰器聚合 我们可以将多个装饰器聚合。","head":[["meta",{"property":"og:url","content":"https://blog.azhf8.top/NestJSLearningRecord/11-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"茕茕の博客"}],["meta",{"property":"og:title","content":"自定义装饰器"}],["meta",{"property":"og:description","content":"创建自定义装饰器 Nest 允许我们创建自定义装饰器。 使用以下命令来创建一个装饰器： 它的内容如下： 装饰器聚合 我们可以将多个装饰器聚合。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.azhf8.top/assets/images/自定义装饰器.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T07:39:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://blog.azhf8.top/assets/images/自定义装饰器.png"}],["meta",{"name":"twitter:image:alt","content":"自定义装饰器"}],["meta",{"property":"article:author","content":"茕茕"}],["meta",{"property":"article:tag","content":"Nest"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T07:39:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义装饰器\\",\\"image\\":[\\"https://blog.azhf8.top/assets/images/自定义装饰器.png\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T07:39:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"茕茕\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"创建自定义装饰器","slug":"创建自定义装饰器","link":"#创建自定义装饰器","children":[]},{"level":2,"title":"装饰器聚合","slug":"装饰器聚合","link":"#装饰器聚合","children":[]}],"git":{"createdTime":1715560636000,"updatedTime":1716017957000,"contributors":[{"name":"zhf521","email":"3407085928@qq.com","commits":2}]},"readingTime":{"minutes":0.48,"words":144},"filePathRelative":"NestJSLearningRecord/11-自定义装饰器.md","localizedDate":"2024年3月5日","excerpt":"<h2>创建自定义装饰器</h2>\\n<p>Nest 允许我们创建自定义装饰器。</p>\\n<p>使用以下命令来创建一个装饰器：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>nest g decorator 装饰器名称\\n</code></pre></div><p>它的内容如下：</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// src/role/role.decorator.ts</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> SetMetadata <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'@nestjs/common'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">Role</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>args<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">SetMetadata</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'role'</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
