import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-D-8Tmyri.js";const e={},p=t(`<h2 id="什么是拦截器" tabindex="-1"><a class="header-anchor" href="#什么是拦截器"><span>什么是拦截器</span></a></h2><p>拦截器（Interceptors）是 Nest 提供的一种中间件机制，用于在请求前后对数据进行拦截处理。</p><h2 id="创建拦截器" tabindex="-1"><a class="header-anchor" href="#创建拦截器"><span>创建拦截器</span></a></h2><p>我们使用以下命令创建一个拦截器：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nest g interceptor 拦截器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>拦截器是一个使用 <code>@Injectable()</code> 装饰器装饰的类。拦截器应该实现 NestInterceptor 接口。它的内容如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/my-interceptor/my-interceptor.interceptor.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
    CallHandler<span class="token punctuation">,</span>
    ExecutionContext<span class="token punctuation">,</span>
    Injectable<span class="token punctuation">,</span>
    NestInterceptor<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptorInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">NestInterceptor</span> <span class="token punctuation">{</span>
    <span class="token function">intercept</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">,</span> next<span class="token operator">:</span> CallHandler<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用拦截器" tabindex="-1"><a class="header-anchor" href="#使用拦截器"><span>使用拦截器</span></a></h2><p>我们可以使用多种方式来使用拦截器。</p><h3 id="控制器中使用" tabindex="-1"><a class="header-anchor" href="#控制器中使用"><span>控制器中使用</span></a></h3><p>我们可以将拦截器直接添加到控制器中：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/user/user.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> Body<span class="token punctuation">,</span> UseInterceptors <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CreateUserDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/create-user.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MyInterceptorInterceptor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/my-interceptor/my-interceptor.interceptor&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">UseInterceptors</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptorInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> userService<span class="token operator">:</span> UserService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> createUserDto<span class="token operator">:</span> CreateUserDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createUserDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块中定义" tabindex="-1"><a class="header-anchor" href="#模块中定义"><span>模块中定义</span></a></h3><p>我们也可以在模块中定义拦截器：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.controller&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user/user.module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MyInterceptorInterceptor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./my-interceptor/my-interceptor.interceptor&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    imports<span class="token operator">:</span> <span class="token punctuation">[</span>UserModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
    controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        AppService<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            provide<span class="token operator">:</span> <span class="token string">&#39;APP_INTERCEPTOR&#39;</span><span class="token punctuation">,</span>
            useClass<span class="token operator">:</span> MyInterceptorInterceptor<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局使用" tabindex="-1"><a class="header-anchor" href="#全局使用"><span>全局使用</span></a></h3><p>我们也可以在全局中使用拦截器，只需要在 <code>main.ts</code> 中进行配置：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/main.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MyInterceptorInterceptor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./my-interceptor/my-interceptor.interceptor&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">useGlobalInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptorInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","10-拦截器.html.vue"]]),k=JSON.parse('{"path":"/NestJSLearningRecord/10-%E6%8B%A6%E6%88%AA%E5%99%A8.html","title":"拦截器","lang":"zh-CN","frontmatter":{"title":"拦截器","order":10,"date":"2024-03-05T00:00:00.000Z","category":"软件开发","tag":"Nest","description":"什么是拦截器 拦截器（Interceptors）是 Nest 提供的一种中间件机制，用于在请求前后对数据进行拦截处理。 创建拦截器 我们使用以下命令创建一个拦截器： 拦截器是一个使用 @Injectable() 装饰器装饰的类。拦截器应该实现 NestInterceptor 接口。它的内容如下： 使用拦截器 我们可以使用多种方式来使用拦截器。 控制器中...","head":[["meta",{"property":"og:url","content":"https://blog.azhf8.top/NestJSLearningRecord/10-%E6%8B%A6%E6%88%AA%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"茕茕の博客"}],["meta",{"property":"og:title","content":"拦截器"}],["meta",{"property":"og:description","content":"什么是拦截器 拦截器（Interceptors）是 Nest 提供的一种中间件机制，用于在请求前后对数据进行拦截处理。 创建拦截器 我们使用以下命令创建一个拦截器： 拦截器是一个使用 @Injectable() 装饰器装饰的类。拦截器应该实现 NestInterceptor 接口。它的内容如下： 使用拦截器 我们可以使用多种方式来使用拦截器。 控制器中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-22T14:22:47.000Z"}],["meta",{"property":"article:author","content":"茕茕"}],["meta",{"property":"article:tag","content":"Nest"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-22T14:22:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拦截器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-22T14:22:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"茕茕\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"什么是拦截器","slug":"什么是拦截器","link":"#什么是拦截器","children":[]},{"level":2,"title":"创建拦截器","slug":"创建拦截器","link":"#创建拦截器","children":[]},{"level":2,"title":"使用拦截器","slug":"使用拦截器","link":"#使用拦截器","children":[{"level":3,"title":"控制器中使用","slug":"控制器中使用","link":"#控制器中使用","children":[]},{"level":3,"title":"模块中定义","slug":"模块中定义","link":"#模块中定义","children":[]},{"level":3,"title":"全局使用","slug":"全局使用","link":"#全局使用","children":[]}]}],"git":{"createdTime":1715560636000,"updatedTime":1716387767000,"contributors":[{"name":"zhf521","email":"3407085928@qq.com","commits":3}]},"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"NestJSLearningRecord/10-拦截器.md","localizedDate":"2024年3月5日","excerpt":"<h2>什么是拦截器</h2>\\n<p>拦截器（Interceptors）是 Nest 提供的一种中间件机制，用于在请求前后对数据进行拦截处理。</p>\\n<h2>创建拦截器</h2>\\n<p>我们使用以下命令创建一个拦截器：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>nest g interceptor 拦截器名称\\n</code></pre></div><p>拦截器是一个使用 <code>@Injectable()</code> 装饰器装饰的类。拦截器应该实现 NestInterceptor 接口。它的内容如下：</p>","autoDesc":true}');export{d as comp,k as data};
