import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-DnytTDiC.js";const e={},c=t(`<h2 id="使用-try-catch-捕获异常" tabindex="-1"><a class="header-anchor" href="#使用-try-catch-捕获异常"><span>使用 try-catch 捕获异常</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-promise-catch-捕获异常" tabindex="-1"><a class="header-anchor" href="#使用-promise-catch-捕获异常"><span>使用 Promise.catch 捕获异常</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化异常捕获" tabindex="-1"><a class="header-anchor" href="#优化异常捕获"><span>优化异常捕获</span></a></h2><p>当有多个异步操作时，要为每个异步操作后面都加上 try-catch 代码块，这显然是不合理的，如果只写一次 try-catch 代码块，就会导致不知道哪一个异步操作出现了问题，所以我们可以自己写一个工具函数来优化异常捕获。</p><p>原来的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">asyncFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">asyncFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们封装一个工具函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">tryCatch</span><span class="token punctuation">(</span><span class="token parameter">asyncFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> asyncFn<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们使用封装好的工具函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>error1<span class="token punctuation">,</span>res1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCatch</span><span class="token punctuation">(</span>asyncFn1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>error2<span class="token punctuation">,</span>res2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCatch</span><span class="token punctuation">(</span>asyncFn2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),p=[c];function o(i,l){return a(),s("div",null,p)}const d=n(e,[["render",o],["__file","03-async异常捕获.html.vue"]]),k=JSON.parse('{"path":"/DevelopmentSkills/03-async%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7.html","title":"async 异常捕获","lang":"zh-CN","frontmatter":{"title":"async 异常捕获","order":3,"date":"2024-03-07T00:00:00.000Z","category":"软件开发","tag":"JavaScript","excerpt":"在使用 async 时如何优雅地捕获异常","description":"使用 try-catch 捕获异常 使用 Promise.catch 捕获异常 优化异常捕获 当有多个异步操作时，要为每个异步操作后面都加上 try-catch 代码块，这显然是不合理的，如果只写一次 try-catch 代码块，就会导致不知道哪一个异步操作出现了问题，所以我们可以自己写一个工具函数来优化异常捕获。 原来的代码： 我们封装一个工具函数：...","head":[["meta",{"property":"og:url","content":"https://blog.azhf8.top/DevelopmentSkills/03-async%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7.html"}],["meta",{"property":"og:site_name","content":"茕茕の博客"}],["meta",{"property":"og:title","content":"async 异常捕获"}],["meta",{"property":"og:description","content":"使用 try-catch 捕获异常 使用 Promise.catch 捕获异常 优化异常捕获 当有多个异步操作时，要为每个异步操作后面都加上 try-catch 代码块，这显然是不合理的，如果只写一次 try-catch 代码块，就会导致不知道哪一个异步操作出现了问题，所以我们可以自己写一个工具函数来优化异常捕获。 原来的代码： 我们封装一个工具函数：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-20T01:32:19.000Z"}],["meta",{"property":"article:author","content":"茕茕"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-20T01:32:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"async 异常捕获\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-20T01:32:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"茕茕\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"使用 try-catch 捕获异常","slug":"使用-try-catch-捕获异常","link":"#使用-try-catch-捕获异常","children":[]},{"level":2,"title":"使用 Promise.catch 捕获异常","slug":"使用-promise-catch-捕获异常","link":"#使用-promise-catch-捕获异常","children":[]},{"level":2,"title":"优化异常捕获","slug":"优化异常捕获","link":"#优化异常捕获","children":[]}],"git":{"createdTime":1715560289000,"updatedTime":1718847139000,"contributors":[{"name":"zhf521","email":"3407085928@qq.com","commits":3},{"name":"茕茕","email":"61277974+zhf521@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.79,"words":238},"filePathRelative":"DevelopmentSkills/03-async异常捕获.md","localizedDate":"2024年3月7日","autoDesc":true}');export{d as comp,k as data};
