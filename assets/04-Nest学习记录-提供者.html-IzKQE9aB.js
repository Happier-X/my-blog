import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-DW26RXda.js";const p={},t=e(`<h2 id="什么是提供者" tabindex="-1"><a class="header-anchor" href="#什么是提供者"><span>什么是提供者</span></a></h2><p>Nest 中的提供者（Providers）是用于管理应用程序的依赖项和服务。提供者可以是任何类，并且可以被注入到其他类中，以便在需要时使用。我们可以理解为：为控制器提供服务的就可以被称作提供者（Providers）。</p><h2 id="定义、注册和使用提供者" tabindex="-1"><a class="header-anchor" href="#定义、注册和使用提供者"><span>定义、注册和使用提供者</span></a></h2><p>在 Nest 中，有多种方式来定义提供者。提供者可以在模块的 <code>providers</code> 数组中进行注册。这样，Nest 就会自动将该提供者注入到需要它的类中。</p><h3 id="标准提供者" tabindex="-1"><a class="header-anchor" href="#标准提供者"><span>标准提供者</span></a></h3><p>标准提供者是使用 <code>@Injectable()</code> 装饰器来定义的。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.service.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppService</span> <span class="token punctuation">{</span>
    <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在模块的 <code>providers</code> 数组中注册提供者：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>
<span class="token comment">// 简写方式</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>
<span class="token comment">// 完整方式</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            provide<span class="token operator">:</span> AppService<span class="token punctuation">,</span>
            useClass<span class="token operator">:</span> AppService<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要使用的类中，在构造函数中注入提供者：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> appService<span class="token operator">:</span> AppService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appService<span class="token punctuation">.</span><span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义提供者" tabindex="-1"><a class="header-anchor" href="#自定义提供者"><span>自定义提供者</span></a></h3><h3 id="值提供者-usevalue" tabindex="-1"><a class="header-anchor" href="#值提供者-usevalue"><span>值提供者（useValue）</span></a></h3><p><code>useValue</code> 语法对于注入常量值、将外部库放入 Nest 容器或使用模拟对象替换实际实现非常有用。</p><p>在模块中，使用 <code>useValue</code> 语法来提供值：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            provide<span class="token operator">:</span> UserService<span class="token punctuation">,</span>
            useValue<span class="token operator">:</span> <span class="token string">&#39;Hello user!&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要使用的类中，在构造函数中注入提供者：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> appService<span class="token operator">:</span> AppService<span class="token punctuation">,</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> userService<span class="token operator">:</span> UserService
    <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appService<span class="token punctuation">.</span><span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非类提供者" tabindex="-1"><a class="header-anchor" href="#非类提供者"><span>非类提供者</span></a></h3><p>我们已经使用了类名作为我们的提供者标记（providers 数组中列出的提供者中的 Provide 属性的值），有时我们希望灵活使用字符串作为提供者标记（token）。</p><p>在模块中注册提供者时，使用字符串标记提供者：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            provide<span class="token operator">:</span> <span class="token string">&#39;TOKEN_KEY&#39;</span><span class="token punctuation">,</span>
            useValue<span class="token operator">:</span> <span class="token string">&#39;This is a token&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要使用的地方，使用 <code>@Inject()</code> 装饰器注入标记为 <code>&#39;TOKEN_KEY&#39;</code> 的提供者：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> appService<span class="token operator">:</span> AppService<span class="token punctuation">,</span>
        <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token string">&#39;TOKEN_KEY&#39;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> token<span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appService<span class="token punctuation">.</span><span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类提供者-useclass" tabindex="-1"><a class="header-anchor" href="#类提供者-useclass"><span>类提供者 (useClass)</span></a></h3><p>在某些情况下，我们可能需要动态地决定使用哪个类来提供服务。我们可以使用 <code>useClass</code> 选项来指定一个类，该类将被实例化并用作提供者。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            provide<span class="token operator">:</span> ConfigService<span class="token punctuation">,</span>
            useClass<span class="token operator">:</span>
                environment <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span>
                    <span class="token operator">?</span> DevelopmentConfigService
                    <span class="token operator">:</span> ProductionConfigService<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>environment</code> 变量来决定使用哪个配置服务类。</p><p>在需要使用的类中，在构造函数中注入提供者即可。</p><h3 id="工厂提供者-usefactory" tabindex="-1"><a class="header-anchor" href="#工厂提供者-usefactory"><span>工厂提供者 (useFactory)</span></a></h3><p>有时候，我们需要动态地创建提供者。我们可以使用工厂函数实现。</p><ol><li>工厂函数可以接受（可选）参数。</li><li><code>inject</code> 属性接受一个提供者数组，在实例化过程中，Nest 将解析该数组并将其作为参数传递给工厂函数。这两个列表应该是相关的：Nest 将从 <code>inject</code> 列表中以相同的顺序将实例作为参数传递给工厂函数。</li></ol><p>在模块中，使用 <code>useFactory</code> 选项来指定一个工厂函数，该函数将返回一个提供者实例。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AClass</span> <span class="token punctuation">{</span>
    <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;A make method&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        AClass<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            provide<span class="token operator">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span>
            inject<span class="token operator">:</span> <span class="token punctuation">[</span>AClass<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> AClass<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要使用的类中，使用 <code>@Inject()</code> 装饰器注入提供者即可。</p><h3 id="别名提供者-useexisting" tabindex="-1"><a class="header-anchor" href="#别名提供者-useexisting"><span>别名提供者 (useExisting)</span></a></h3><p><code>useExisting</code> 语法允许您为现有的提供程序创建别名。这将创建两种访问同一提供者的方法。如果你想要重用一个已经存在的提供者</p><p>在模块中，使用 <code>useExisting</code> 来指定别名。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        AClass<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            provide<span class="token operator">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span>
            useExisting<span class="token operator">:</span> UserService<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要使用的类中，使用 <code>@Inject()</code> 装饰器注入提供者即可。</p>`,41),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","04-Nest学习记录-提供者.html.vue"]]),k=JSON.parse('{"path":"/NestJSLearningRecord/04-Nest%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E6%8F%90%E4%BE%9B%E8%80%85.html","title":"Nest学习记录-提供者","lang":"zh-CN","frontmatter":{"title":"Nest学习记录-提供者","order":4,"date":"2024-03-05T00:00:00.000Z","category":"软件开发","tag":["Nest"],"description":"什么是提供者 Nest 中的提供者（Providers）是用于管理应用程序的依赖项和服务。提供者可以是任何类，并且可以被注入到其他类中，以便在需要时使用。我们可以理解为：为控制器提供服务的就可以被称作提供者（Providers）。 定义、注册和使用提供者 在 Nest 中，有多种方式来定义提供者。提供者可以在模块的 providers 数组中进行注册。...","head":[["meta",{"property":"og:url","content":"https://blog.azhf8.top/NestJSLearningRecord/04-Nest%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E6%8F%90%E4%BE%9B%E8%80%85.html"}],["meta",{"property":"og:site_name","content":"茕茕の博客"}],["meta",{"property":"og:title","content":"Nest学习记录-提供者"}],["meta",{"property":"og:description","content":"什么是提供者 Nest 中的提供者（Providers）是用于管理应用程序的依赖项和服务。提供者可以是任何类，并且可以被注入到其他类中，以便在需要时使用。我们可以理解为：为控制器提供服务的就可以被称作提供者（Providers）。 定义、注册和使用提供者 在 Nest 中，有多种方式来定义提供者。提供者可以在模块的 providers 数组中进行注册。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-13T00:37:16.000Z"}],["meta",{"property":"article:author","content":"茕茕"}],["meta",{"property":"article:tag","content":"Nest"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-13T00:37:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nest学习记录-提供者\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-13T00:37:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"茕茕\\",\\"url\\":\\"/MyBlog/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"什么是提供者","slug":"什么是提供者","link":"#什么是提供者","children":[]},{"level":2,"title":"定义、注册和使用提供者","slug":"定义、注册和使用提供者","link":"#定义、注册和使用提供者","children":[{"level":3,"title":"标准提供者","slug":"标准提供者","link":"#标准提供者","children":[]},{"level":3,"title":"自定义提供者","slug":"自定义提供者","link":"#自定义提供者","children":[]},{"level":3,"title":"值提供者（useValue）","slug":"值提供者-usevalue","link":"#值提供者-usevalue","children":[]},{"level":3,"title":"非类提供者","slug":"非类提供者","link":"#非类提供者","children":[]},{"level":3,"title":"类提供者 (useClass)","slug":"类提供者-useclass","link":"#类提供者-useclass","children":[]},{"level":3,"title":"工厂提供者 (useFactory)","slug":"工厂提供者-usefactory","link":"#工厂提供者-usefactory","children":[]},{"level":3,"title":"别名提供者 (useExisting)","slug":"别名提供者-useexisting","link":"#别名提供者-useexisting","children":[]}]}],"git":{"createdTime":1715560636000,"updatedTime":1715560636000,"contributors":[{"name":"zhf521","email":"3407085928@qq.com","commits":1}]},"readingTime":{"minutes":3.49,"words":1046},"filePathRelative":"NestJSLearningRecord/04-Nest学习记录-提供者.md","localizedDate":"2024年3月5日","excerpt":"<h2>什么是提供者</h2>\\n<p>Nest 中的提供者（Providers）是用于管理应用程序的依赖项和服务。提供者可以是任何类，并且可以被注入到其他类中，以便在需要时使用。我们可以理解为：为控制器提供服务的就可以被称作提供者（Providers）。</p>\\n<h2>定义、注册和使用提供者</h2>\\n<p>在 Nest 中，有多种方式来定义提供者。提供者可以在模块的 <code>providers</code> 数组中进行注册。这样，Nest 就会自动将该提供者注入到需要它的类中。</p>\\n<h3>标准提供者</h3>\\n<p>标准提供者是使用 <code>@Injectable()</code> 装饰器来定义的。</p>","autoDesc":true}');export{d as comp,k as data};
