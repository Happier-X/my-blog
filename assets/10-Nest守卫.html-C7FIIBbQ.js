import{_ as i,c as e,d as t,o as a}from"./app-BjZNFQd3.js";const n={};function l(h,s){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="nest-守卫" tabindex="-1"><a class="header-anchor" href="#nest-守卫"><span>Nest 守卫</span></a></h1><p>守卫 (Guards) 用于对 Nest 应用中的路由进行验证的。守卫根据运行时出现的某些条件 (例如权限，角色，访问控制列表等) 来确定给定的请求是否由路由处理程序处理。</p><figure><img src="https://happier-blog.oss-cn-qingdao.aliyuncs.com/NestStudyNotes/Nest守卫01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="创建守卫" tabindex="-1"><a class="header-anchor" href="#创建守卫"><span>创建守卫</span></a></h2><p>使用如下命令可以快速创建一个守卫。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> guard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">GUARD_NAM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">E&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>&lt;GUARD_NAME&gt; 可以是文件路径，例如 <code>guards/auth</code>。</p></blockquote><p>这里我们创建一个 <code>AuthGuard</code> 守卫。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> guard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> guards/auth</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时会在 <code>src/guards/auth</code> 下创建了一个 <code>auth.guard.ts</code> 文件和一个 <code>auth.guard.spec.ts</code> 文件。</p><p><code>auth.guard.ts</code> 文件内容如下。</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CanActivate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ExecutionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Injectable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Observable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;rxjs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Injectable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthGuard</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CanActivate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    canActivate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        context</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutionContext</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    )</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> boolean</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Observable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码可以看出，<code>AuthGuard</code> 类使用了 <code>@Injectable()</code> 装饰器，该类实现了 <code>CanActivate</code> 接口，并实现了 <code>canActivate()</code> 方法，该方法接收一个 <code>context:ExecutionContext</code> 参数。</p><p><code>canActivate()</code> 方法可以是同步的，也可以是异步的，返回值可以是布尔值，也可以是 <code>Promise&lt;boolean&gt;</code>，也可以是 <code>Observable&lt;boolean&gt;</code>，如果要验证通过，则必须返回 <code>true</code>。</p><h2 id="使用守卫" tabindex="-1"><a class="header-anchor" href="#使用守卫"><span>使用守卫</span></a></h2>`,15)]))}const r=i(n,[["render",l],["__file","10-Nest守卫.html.vue"]]),d=JSON.parse(`{"path":"/NestStudyNotes/10-Nest%E5%AE%88%E5%8D%AB.html","title":"Nest 守卫","lang":"zh-CN","frontmatter":{"cover":"https://t.alcy.cc/fj?t=1735293600000","order":10,"date":"2024-12-27 18:00","category":"软件开发","tag":"Nest","excerpt":false,"description":"Nest 守卫 守卫 (Guards) 用于对 Nest 应用中的路由进行验证的。守卫根据运行时出现的某些条件 (例如权限，角色，访问控制列表等) 来确定给定的请求是否由路由处理程序处理。 创建守卫 使用如下命令可以快速创建一个守卫。 <GUARD_NAME> 可以是文件路径，例如 guards/auth。 这里我们创建一个 AuthGuard 守卫。...","head":[["meta",{"property":"og:url","content":"https://blog.happierx.top/NestStudyNotes/10-Nest%E5%AE%88%E5%8D%AB.html"}],["meta",{"property":"og:site_name","content":"Happier's Blog"}],["meta",{"property":"og:title","content":"Nest 守卫"}],["meta",{"property":"og:description","content":"Nest 守卫 守卫 (Guards) 用于对 Nest 应用中的路由进行验证的。守卫根据运行时出现的某些条件 (例如权限，角色，访问控制列表等) 来确定给定的请求是否由路由处理程序处理。 创建守卫 使用如下命令可以快速创建一个守卫。 <GUARD_NAME> 可以是文件路径，例如 guards/auth。 这里我们创建一个 AuthGuard 守卫。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://t.alcy.cc/fj?t=1735293600000"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-30T06:44:52.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://t.alcy.cc/fj?t=1735293600000"}],["meta",{"name":"twitter:image:alt","content":"Nest 守卫"}],["meta",{"property":"article:tag","content":"Nest"}],["meta",{"property":"article:published_time","content":"2024-12-27T18:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-30T06:44:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nest 守卫\\",\\"image\\":[\\"https://happier-blog.oss-cn-qingdao.aliyuncs.com/NestStudyNotes/Nest%E5%AE%88%E5%8D%AB01.jpg\\"],\\"datePublished\\":\\"2024-12-27T18:00:00.000Z\\",\\"dateModified\\":\\"2024-12-30T06:44:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Happier\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"创建守卫","slug":"创建守卫","link":"#创建守卫","children":[]},{"level":2,"title":"使用守卫","slug":"使用守卫","link":"#使用守卫","children":[]}],"git":{"createdTime":1735294754000,"updatedTime":1735541092000,"contributors":[{"name":"赵鸿飞","email":"zhaohongfei@vasoyn.com","commits":2}]},"readingTime":{"minutes":1.02,"words":305},"filePathRelative":"NestStudyNotes/10-Nest守卫.md","localizedDate":"2024年12月27日","excerpt":"","autoDesc":true}`);export{r as comp,d as data};
