import{_ as i,c as e,d as t,o as a}from"./app-BDfCXyju.js";const n={};function l(h,s){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="nest-拦截器" tabindex="-1"><a class="header-anchor" href="#nest-拦截器"><span>Nest 拦截器</span></a></h1><p>拦截器 (Interceptors) 可以具有一系列功能，它可以：</p><ul><li>在函数执行之前/之后添加额外的逻辑。</li><li>转换从函数返回的结果。</li><li>转换从函数抛出的异常。</li><li>扩展基本函数行为。</li><li>根据所选条件完全重写函数。</li></ul><figure><img src="https://happier-blog.oss-cn-qingdao.aliyuncs.com/NestStudyNotes/Nest拦截器01.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="创建拦截器" tabindex="-1"><a class="header-anchor" href="#创建拦截器"><span>创建拦截器</span></a></h2><p>使用如下命令可以快速创建一个拦截器。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">INTERCEPTOR_NAM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">E&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>&lt;INTERCEPTOR_NAME&gt; 可以是文件路径，例如 <code>interceptors/hello-world</code>。</p></blockquote><p>这里我们创建一个 <code>HelloWorldInterceptor</code> 拦截器。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interceptor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interceptors/hello-world</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时会在 <code>src/interceptors/hello-world</code> 下创建了一个 <code>hello-world.interceptor.ts</code> 文件和一个 <code>hello-world.interceptor.spec.ts</code> 文件。</p><p><code>hello-world.interceptor.ts</code> 文件内容如下。</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    CallHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ExecutionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Injectable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    NestInterceptor</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Observable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;rxjs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Injectable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorldInterceptor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NestInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    intercept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">context</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">next</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CallHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Observable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)]))}const r=i(n,[["render",l],["__file","09-Nest拦截器.html.vue"]]),k=JSON.parse(`{"path":"/NestStudyNotes/09-Nest%E6%8B%A6%E6%88%AA%E5%99%A8.html","title":"Nest 拦截器","lang":"zh-CN","frontmatter":{"cover":"https://t.alcy.cc/fj?t=1735288200000","order":9,"date":"2024-12-27 16:30","category":"软件开发","tag":"Nest","excerpt":false,"description":"Nest 拦截器 拦截器 (Interceptors) 可以具有一系列功能，它可以： 在函数执行之前/之后添加额外的逻辑。 转换从函数返回的结果。 转换从函数抛出的异常。 扩展基本函数行为。 根据所选条件完全重写函数。 创建拦截器 使用如下命令可以快速创建一个拦截器。 <INTERCEPTOR_NAME> 可以是文件路径，例如 interceptors...","head":[["meta",{"property":"og:url","content":"https://blog.happierx.top/NestStudyNotes/09-Nest%E6%8B%A6%E6%88%AA%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Happier's Blog"}],["meta",{"property":"og:title","content":"Nest 拦截器"}],["meta",{"property":"og:description","content":"Nest 拦截器 拦截器 (Interceptors) 可以具有一系列功能，它可以： 在函数执行之前/之后添加额外的逻辑。 转换从函数返回的结果。 转换从函数抛出的异常。 扩展基本函数行为。 根据所选条件完全重写函数。 创建拦截器 使用如下命令可以快速创建一个拦截器。 <INTERCEPTOR_NAME> 可以是文件路径，例如 interceptors..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://t.alcy.cc/fj?t=1735288200000"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-27T08:50:04.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://t.alcy.cc/fj?t=1735288200000"}],["meta",{"name":"twitter:image:alt","content":"Nest 拦截器"}],["meta",{"property":"article:tag","content":"Nest"}],["meta",{"property":"article:published_time","content":"2024-12-27T16:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-27T08:50:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nest 拦截器\\",\\"image\\":[\\"https://happier-blog.oss-cn-qingdao.aliyuncs.com/NestStudyNotes/Nest%E6%8B%A6%E6%88%AA%E5%99%A801.jpg\\"],\\"datePublished\\":\\"2024-12-27T16:30:00.000Z\\",\\"dateModified\\":\\"2024-12-27T08:50:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Happier\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"创建拦截器","slug":"创建拦截器","link":"#创建拦截器","children":[]}],"git":{"createdTime":1735288902000,"updatedTime":1735289404000,"contributors":[{"name":"赵鸿飞","email":"zhaohongfei@vasoyn.com","commits":2}]},"readingTime":{"minutes":0.76,"words":228},"filePathRelative":"NestStudyNotes/09-Nest拦截器.md","localizedDate":"2024年12月27日","excerpt":"","autoDesc":true}`);export{r as comp,k as data};
