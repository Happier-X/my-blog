import{_ as t,c as s,d as i,o as a}from"./app-CyEy9QIG.js";const r={};function n(o,e){return a(),s("div",null,e[0]||(e[0]=[i('<h1 id="nest-自定义装饰器" tabindex="-1"><a class="header-anchor" href="#nest-自定义装饰器"><span>Nest 自定义装饰器</span></a></h1><p>Nest 允许我们创建自定义装饰器。</p><h2 id="参数装饰器" tabindex="-1"><a class="header-anchor" href="#参数装饰器"><span>参数装饰器</span></a></h2><p>使用如下命令可以快速创建一个装饰器。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> decorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">DECORATOR_NAM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">E&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>&lt;DECORATOR_NAME&gt; 可以是文件路径，例如 <code>decorators/user</code>。</p></blockquote><p>这里我们创建一个 <code>User</code> 装饰器。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> decorator</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> decorators/user</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时会在 <code>src/decorators/user</code> 下创建一个 <code>user.decorator.ts</code> 文件。</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',10)]))}const c=t(r,[["render",n],["__file","11-Nest自定义装饰器.html.vue"]]),d=JSON.parse(`{"path":"/NestStudyNotes/11-Nest%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8.html","title":"Nest 自定义装饰器","lang":"zh-CN","frontmatter":{"cover":"https://t.alcy.cc/fj?t=1735542000000","order":11,"date":"2024-12-30 15:00","category":"软件开发","tag":"Nest","excerpt":false,"description":"Nest 自定义装饰器 Nest 允许我们创建自定义装饰器。 参数装饰器 使用如下命令可以快速创建一个装饰器。 <DECORATOR_NAME> 可以是文件路径，例如 decorators/user。 这里我们创建一个 User 装饰器。 此时会在 src/decorators/user 下创建一个 user.decorator.ts 文件。","head":[["meta",{"property":"og:url","content":"https://blog.happierx.top/NestStudyNotes/11-Nest%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Happier's Blog"}],["meta",{"property":"og:title","content":"Nest 自定义装饰器"}],["meta",{"property":"og:description","content":"Nest 自定义装饰器 Nest 允许我们创建自定义装饰器。 参数装饰器 使用如下命令可以快速创建一个装饰器。 <DECORATOR_NAME> 可以是文件路径，例如 decorators/user。 这里我们创建一个 User 装饰器。 此时会在 src/decorators/user 下创建一个 user.decorator.ts 文件。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://t.alcy.cc/fj?t=1735542000000"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-30T07:21:55.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://t.alcy.cc/fj?t=1735542000000"}],["meta",{"name":"twitter:image:alt","content":"Nest 自定义装饰器"}],["meta",{"property":"article:tag","content":"Nest"}],["meta",{"property":"article:published_time","content":"2024-12-30T15:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-30T07:21:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nest 自定义装饰器\\",\\"image\\":[\\"https://t.alcy.cc/fj?t=1735542000000\\"],\\"datePublished\\":\\"2024-12-30T15:00:00.000Z\\",\\"dateModified\\":\\"2024-12-30T07:21:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Happier\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"参数装饰器","slug":"参数装饰器","link":"#参数装饰器","children":[]}],"git":{"createdTime":1735543315000,"updatedTime":1735543315000,"contributors":[{"name":"赵鸿飞","email":"zhaohongfei@vasoyn.com","commits":1}]},"readingTime":{"minutes":0.37,"words":111},"filePathRelative":"NestStudyNotes/11-Nest自定义装饰器.md","localizedDate":"2024年12月30日","excerpt":"","autoDesc":true}`);export{c as comp,d as data};
