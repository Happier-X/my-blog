import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as p}from"./app-DV4k3F-f.js";const t={},e=p(`<h2 id="控制反转-ioc" tabindex="-1"><a class="header-anchor" href="#控制反转-ioc"><span>控制反转（IoC）</span></a></h2><p>控制反转（Inversion of Control，IoC）是一种软件设计思想，旨在将对象的创建和管理交给外部容器（如 IoC 容器），而不是在代码中硬编码。通过 IoC，对象之间的依赖关系由容器管理，而不是在代码中显式地创建和配置。可以降低计算机代码之间的耦合度。</p><p>在 Nest 中，IoC 容器负责管理对象的生命周期和依赖关系。</p><h2 id="依赖注入-di" tabindex="-1"><a class="header-anchor" href="#依赖注入-di"><span>依赖注入（DI）</span></a></h2><p>依赖注入（Dependency Injection，DI）是 IoC 的一种实现方式，通过将依赖项（即对象之间的依赖关系）注入到目标对象中，实现控制反转。</p><p>在 Nest 中，依赖注入主要是通过装饰器（Decorators）实现的，通过在目标对象上添加装饰器，将依赖项注入到目标对象中。</p><h2 id="两者关系" tabindex="-1"><a class="header-anchor" href="#两者关系"><span>两者关系</span></a></h2><p>控制反转是一种设计思想（设计模式），而依赖注入是控制反转的一种实现方式。</p><h2 id="依赖注入的实现" tabindex="-1"><a class="header-anchor" href="#依赖注入的实现"><span>依赖注入的实现</span></a></h2><p>首先我们来看一下传统的开发方式，在传统的开发模式中，对象之间的依赖关系由代码中显式地创建和配置。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 假设这是我们的 CPU 和 GPU 类</span>
<span class="token keyword">class</span> <span class="token class-name">IntelCPU</span> <span class="token punctuation">{</span>
    <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Intel CPU 运行中...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">NvidiaGPU</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nvidia GPU 渲染中...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">CPU</span></span> <span class="token punctuation">{</span>
    <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">GPU</span></span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这是我们的 Computer 类，它直接创建 CPU 和 GPU 的实例</span>
<span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
    cpu<span class="token operator">:</span> <span class="token constant">CPU</span><span class="token punctuation">;</span>
    gpu<span class="token operator">:</span> <span class="token constant">GPU</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntelCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 硬编码依赖</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NvidiaGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 硬编码依赖</span>
    <span class="token punctuation">}</span>

    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gpu<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 Computer 类</span>
<span class="token keyword">const</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
computer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Computer 类在构造函数中直接创建了 IntelCPU 和 NvidiaGPU 的实例。这种方式的缺点是，如果我们需要更换 CPU 或 GPU 的实现，我们需要修改 Computer 类的代码。</p><p>在依赖注入中，组件不直接创建依赖项，而是在创建时通过构造函数、属性或方法参数接收依赖项。</p><p>现在我们来看一下使用依赖注入后的代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// CPU 和 GPU 接口</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">CPU</span></span> <span class="token punctuation">{</span>
    <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">GPU</span></span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现类</span>
<span class="token keyword">class</span> <span class="token class-name">IntelCPU</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">CPU</span></span> <span class="token punctuation">{</span>
    <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Intel CPU 运行中...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">NvidiaGPU</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">GPU</span></span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nvidia GPU 渲染中...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Computer 类，使用依赖注入</span>
<span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
    cpu<span class="token operator">:</span> <span class="token constant">CPU</span><span class="token punctuation">;</span>
    gpu<span class="token operator">:</span> <span class="token constant">GPU</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>cpu<span class="token operator">:</span> <span class="token constant">CPU</span><span class="token punctuation">,</span> gpu<span class="token operator">:</span> <span class="token constant">GPU</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gpu <span class="token operator">=</span> gpu<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gpu<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建 Computer 实例时，我们传递 CPU 和 GPU 的实例</span>
<span class="token keyword">const</span> intelCpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntelCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nvidiaGpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NvidiaGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span>intelCpu<span class="token punctuation">,</span> nvidiaGpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
computer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Computer 类通过构造函数接收 CPU 和 GPU 的实例。这样，我们可以根据需要传递不同的实现，而不需要修改 Computer 类的代码。</p><h2 id="nest-中依赖注入的实现" tabindex="-1"><a class="header-anchor" href="#nest-中依赖注入的实现"><span>Nest 中依赖注入的实现</span></a></h2><p>在 Nest 中，依赖注入（DI）是通过装饰器和 IoC 容器实现的。以下是一个简单的例子，展示了如何在 Nest 应用程序中使用依赖注入：</p><p>我们定义一个服务（Service）和一个控制器（Controllers），然后使用 Nest 的装饰器来标记它们。</p><p>首先，我们创建一个服务类，使用 <code>@Injectable()</code> 装饰器来标记它为可注入的服务。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.service.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppService</span> <span class="token punctuation">{</span>
    <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们创建一个控制器类，它将依赖于 <code>AppService</code>。在控制器的构造函数中，我们通过类型注解来声明依赖，并让 Nest 的 IoC 容器自动注入它。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> appService<span class="token operator">:</span> AppService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appService<span class="token punctuation">.</span><span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，<code>AppService</code> 作为一个提供者（Providers），需要在模块中进行注册。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.controller&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们启动 Nest 应用程序，Nest 会自动处理依赖注入。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/main.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.module&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当 <code>AppController</code> 被创建时，NestJS 的 IoC 容器会查找 <code>AppService</code> 的提供者，并将其实例注入到 <code>AppController</code> 的构造函数中。这样， <code>AppController</code> 就可以使用 <code>AppService</code> 的方法，而不需要自己创建 <code>AppService</code> 的实例。</p>`,28),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","02-控制反转与依赖注入.html.vue"]]),d=JSON.parse('{"path":"/NestJSLearningRecord/02-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html","title":"控制反转与依赖注入","lang":"zh-CN","frontmatter":{"title":"控制反转与依赖注入","order":2,"date":"2024-03-05T00:00:00.000Z","category":"软件开发","tag":["Nest"],"description":"控制反转（IoC） 控制反转（Inversion of Control，IoC）是一种软件设计思想，旨在将对象的创建和管理交给外部容器（如 IoC 容器），而不是在代码中硬编码。通过 IoC，对象之间的依赖关系由容器管理，而不是在代码中显式地创建和配置。可以降低计算机代码之间的耦合度。 在 Nest 中，IoC 容器负责管理对象的生命周期和依赖关系。 ...","head":[["meta",{"property":"og:url","content":"https://blog.azhf8.top/NestJSLearningRecord/02-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"茕茕の博客"}],["meta",{"property":"og:title","content":"控制反转与依赖注入"}],["meta",{"property":"og:description","content":"控制反转（IoC） 控制反转（Inversion of Control，IoC）是一种软件设计思想，旨在将对象的创建和管理交给外部容器（如 IoC 容器），而不是在代码中硬编码。通过 IoC，对象之间的依赖关系由容器管理，而不是在代码中显式地创建和配置。可以降低计算机代码之间的耦合度。 在 Nest 中，IoC 容器负责管理对象的生命周期和依赖关系。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T03:31:17.000Z"}],["meta",{"property":"article:author","content":"茕茕"}],["meta",{"property":"article:tag","content":"Nest"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T03:31:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"控制反转与依赖注入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T03:31:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"茕茕\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"headers":[{"level":2,"title":"控制反转（IoC）","slug":"控制反转-ioc","link":"#控制反转-ioc","children":[]},{"level":2,"title":"依赖注入（DI）","slug":"依赖注入-di","link":"#依赖注入-di","children":[]},{"level":2,"title":"两者关系","slug":"两者关系","link":"#两者关系","children":[]},{"level":2,"title":"依赖注入的实现","slug":"依赖注入的实现","link":"#依赖注入的实现","children":[]},{"level":2,"title":"Nest 中依赖注入的实现","slug":"nest-中依赖注入的实现","link":"#nest-中依赖注入的实现","children":[]}],"git":{"createdTime":1715560636000,"updatedTime":1715830277000,"contributors":[{"name":"zhf521","email":"3407085928@qq.com","commits":1}]},"readingTime":{"minutes":3.55,"words":1064},"filePathRelative":"NestJSLearningRecord/02-控制反转与依赖注入.md","localizedDate":"2024年3月5日","excerpt":"<h2>控制反转（IoC）</h2>\\n<p>控制反转（Inversion of Control，IoC）是一种软件设计思想，旨在将对象的创建和管理交给外部容器（如 IoC 容器），而不是在代码中硬编码。通过 IoC，对象之间的依赖关系由容器管理，而不是在代码中显式地创建和配置。可以降低计算机代码之间的耦合度。</p>\\n<p>在 Nest 中，IoC 容器负责管理对象的生命周期和依赖关系。</p>\\n<h2>依赖注入（DI）</h2>\\n<p>依赖注入（Dependency Injection，DI）是 IoC 的一种实现方式，通过将依赖项（即对象之间的依赖关系）注入到目标对象中，实现控制反转。</p>","autoDesc":true}');export{k as comp,d as data};
