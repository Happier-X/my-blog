import{_ as s,e as t,h as e,o as a}from"./app-XBzBnr-a.js";const l={};function n(o,i){return a(),t("div",null,i[0]||(i[0]=[e(`<h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World!</span></a></h2><p>我们使用 Go 语言输出 <code>Hello World!</code></p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 定义包名，必须在源文件中非注释的第一行指明这个文件属于哪个包，每个 Go 应用程序都包含一个名为 main 的包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 告诉编译器这个程序需要使用 fmt 包，这个包实现了格式化输入/输出的函数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 程序开始执行的函数，main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 这是我的第一个 Go 程序，我是单行注释</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		我是多行注释</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	*/</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 用于将字符串输出到控制台</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-语言的基础组成" tabindex="-1"><a class="header-anchor" href="#go-语言的基础组成"><span>Go 语言的基础组成</span></a></h2><ul><li>包声明</li><li>引入包</li><li>函数</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><h2 id="go-语言命名规范" tabindex="-1"><a class="header-anchor" href="#go-语言命名规范"><span>Go 语言命名规范</span></a></h2><p>当标识符 (包括常量、变量、类型、函数名、结构字段等等) 以一个大写字母开头，如：Group，那么使用这种形式的标识符的对象就可以被外部包的代码所使用 (客户端程序需要先导入这个包)，这被称为导出 (类似面向对象语言中的 public)；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的 (类似面向对象语言中的 private)</p><h2 id="go-程序的执行" tabindex="-1"><a class="header-anchor" href="#go-程序的执行"><span>Go 程序的执行</span></a></h2><p>我们将以上代码放入 <code>Hello.go</code> 文件中，在该文件目录下执行以下命令即可：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello.go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,10)]))}const r=s(l,[["render",n],["__file","02-Go语言结构.html.vue"]]),p=JSON.parse(`{"path":"/GoStudyNotes/02-Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84.html","title":"Go 语言结构","lang":"zh-CN","frontmatter":{"title":"Go 语言结构","cover":"https://t.alcy.cc/fj?t=1720490400","order":2,"date":"2024-07-09T10:00:00.000Z","category":"开发","tag":"Go","description":"Hello World! 我们使用 Go 语言输出 Hello World! Go 语言的基础组成 包声明 引入包 函数 变量 语句 & 表达式 注释 Go 语言命名规范 当标识符 (包括常量、变量、类型、函数名、结构字段等等) 以一个大写字母开头，如：Group，那么使用这种形式的标识符的对象就可以被外部包的代码所使用 (客户端程序需要先导入这个包)...","head":[["meta",{"property":"og:url","content":"https://blog.happierx.top/GoStudyNotes/02-Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Happier's Blog"}],["meta",{"property":"og:title","content":"Go 语言结构"}],["meta",{"property":"og:description","content":"Hello World! 我们使用 Go 语言输出 Hello World! Go 语言的基础组成 包声明 引入包 函数 变量 语句 & 表达式 注释 Go 语言命名规范 当标识符 (包括常量、变量、类型、函数名、结构字段等等) 以一个大写字母开头，如：Group，那么使用这种形式的标识符的对象就可以被外部包的代码所使用 (客户端程序需要先导入这个包)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://t.alcy.cc/fj?t=1720490400"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T07:41:07.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://t.alcy.cc/fj?t=1720490400"}],["meta",{"name":"twitter:image:alt","content":"Go 语言结构"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2024-07-09T10:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T07:41:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 语言结构\\",\\"image\\":[\\"https://t.alcy.cc/fj?t=1720490400\\"],\\"datePublished\\":\\"2024-07-09T10:00:00.000Z\\",\\"dateModified\\":\\"2025-01-16T07:41:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Happier\\",\\"url\\":\\"/AboutMe/\\"}]}"]]},"git":{"createdTime":1720517001000,"updatedTime":1737013267000,"contributors":[{"name":"茕茕","username":"茕茕","email":"61277974+zhf521@users.noreply.github.com","commits":4,"url":"https://github.com/茕茕"},{"name":"zhf521","username":"zhf521","email":"3407085928@qq.com","commits":5,"url":"https://github.com/zhf521"},{"name":"赵鸿飞","username":"赵鸿飞","email":"zhaohongfei@vasoyn.com","commits":5,"url":"https://github.com/赵鸿飞"}]},"readingTime":{"minutes":1.46,"words":437},"filePathRelative":"GoStudyNotes/02-Go语言结构.md","localizedDate":"2024年7月9日","excerpt":"","autoDesc":true}`);export{r as comp,p as data};
